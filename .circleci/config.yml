version: 2.1
jobs:
  "build-test":
    docker:
      - image: alpine:3.16
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.12
      - run:
          name: Install deps
          command: apk add gcc musl-dev make bash git go
      - run:
          name: Build
          command: make build
      - run:
          name: Test
          command: make test
      - run:
          name: Integration tests # test cross build too!
          command: make -e TARGET_TEST_ARCH=* integration_test
      - run:
          name: Prepare Artifacts
          command: |
            mkdir -p /tmp/build-amd64
            cp _output/bin/driverkit /tmp/build-amd64/
      - persist_to_workspace:
          root: /tmp
          paths:
            - build-amd64/
  "build-test-arm64":
    machine:
      enabled: true
      image: ubuntu-2004:2022.04.1
    resource_class: arm.medium
    steps:
      - checkout:
          path: /tmp/source
      - run:
          name: Prepare project
          command: |
            docker run --rm -it -v /tmp/source:/source -v /var/run/docker.sock:/var/run/docker.sock -w /source --name alpine_sh -d alpine:3.16 sh
            docker exec alpine_sh apk add gcc musl-dev make bash git go docker
            docker exec alpine_sh git config --global --add safe.directory /source
      - run:
          name: Build
          command: docker exec alpine_sh make build
      - run:
          name: Test
          command: docker exec alpine_sh make test
      - run:
          name: Integration tests
          command: docker exec alpine_sh make integration_test
      - run:
          name: Prepare Artifacts
          command: |
            mkdir -p /tmp/build-arm64
            cp /tmp/source/_output/bin/driverkit /tmp/build-arm64/     
      - persist_to_workspace:
          root: /tmp
          paths:
            - build-arm64/
  "images":
    docker:
      - image: cimg/base:stable
        user: root
    steps:
      - attach_workspace:
          at: /
      - checkout
      - setup_remote_docker:
          version: 20.10.12
      - run:
          name: Prepare env
          command: |
            docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
            docker context create dk-env
            docker buildx create dk-env --driver docker-container --use
            echo ${DOCKERHUB_SECRET} | docker login -u ${DOCKERHUB_USER} --password-stdin
            sudo apt update
            sudo apt install make bash git
      - run:
          name: Copy binaries from workspace
          command: |
            cp -r /build-* .
      - run:
          name: Build and Push all docker images
          command: |
            GIT_BRANCH="$CIRCLE_BRANCH" GIT_TAG="$CIRCLE_TAG" make push/all
      - run:
          name: Push latest images
          command: |
            if [ -n "$CIRCLE_TAG" ]
            then
              GIT_BRANCH="$CIRCLE_BRANCH" GIT_TAG="$CIRCLE_TAG" make push/latest
            else
              echo "Skipping (no git tag)"
            fi
  "release":
    docker:
      - image: circleci/golang:1.17
    steps:
      - checkout
      - run:
          name: Install goreleaser
          command: |
            echo 'deb [trusted=yes] https://repo.goreleaser.com/apt/ /' | sudo tee /etc/apt/sources.list.d/goreleaser.list
            sudo apt update
            sudo apt install goreleaser
      - run:
          name: Release
          command: GIT_TAG="$CIRCLE_TAG" make release
workflows:
  version: 2.1
  build:
    jobs:
      - "build-test":
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*(-.*)*/
      - "build-test-arm64":
          filters:
            tags:
              only: /v[0-9]+(\.[0-9]+)*(-.*)*/
      - "images":
          context: falco
          filters:
            branches:
              only:
                - master
            tags:
              only: /v[0-9]+(\.[0-9]+)*(-.*)*/
          requires:
            - "build-test"
            - "build-test-arm64"
      - "release":
          context: falco
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v[0-9]+(\.[0-9]+)*(-.*)*/
          requires:
            - "images"
